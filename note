app.py

import streamlit as st
from theme import apply_dark_theme
from database import create_tables
from login import show_login_create_account
from sidebar import show_sidebar
from home import show_home

def main():
    # Must be the FIRST Streamlit command
    st.set_page_config(page_title="Code for Impact", layout="wide")

    # Apply dark theme
    apply_dark_theme()
    
    # Ensure tables exist (and DB is pulled from GitHub if you're doing that in create_tables)
    create_tables()

    # Track login state
    if "logged_in" not in st.session_state:
        st.session_state["logged_in"] = False

    if st.session_state["logged_in"]:
        # Use your sidebar to get the chosen page
        selected = show_sidebar()

        if selected == "logout":
            st.session_state["logged_in"] = False
            st.rerun()

        elif selected == "home":
            show_home()

        # ─────────────────────────────────────────────────────────────────
        # Handle Assignments
        # ─────────────────────────────────────────────────────────────────
        elif selected == "as1":
            import as1
            as1.show()

        elif selected == "as2":
            import as2
            as2.show()

        elif selected == "as3":
            import as3
            as3.show()

        elif selected == "as4":
            import as4
            as4.show()

        # ─────────────────────────────────────────────────────────────────
        # Handle Quizzes
        # ─────────────────────────────────────────────────────────────────
        elif selected == "quiz1":
            import quiz1
            quiz1.show()

        elif selected == "quiz2":
            import quiz2
            quiz2.show()

        # ─────────────────────────────────────────────────────────────────
        # Handle Help (if you have a help.py module)
        # ─────────────────────────────────────────────────────────────────
        elif selected == "help":
            import help
            help.show()

        else:
            st.warning("Unknown selection.")

    else:
        # If not logged in, show login/create account pages
        show_login_create_account()

if __name__ == "__main__":
    main()


----------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------------


import streamlit as st

def show_sidebar():
    # Custom CSS for the sidebar styling with animated title
    st.markdown("""
        <style>
        /* Sidebar styling */
        .css-1d391kg {
            padding: 2rem 1rem;
        }
        
        /* Title animation and styling */
        .sidebar-title {
            background: linear-gradient(45deg, #FF6B6B, #4ECDC4);
            background-size: 200% 200%;
            color: white;
            padding: 1rem;
            border-radius: 10px;
            text-align: center;
            font-weight: bold;
            margin-bottom: 2rem;
            animation: gradient 5s ease infinite;
            box-shadow: 0 4px 15px rgba(0,0,0,0.1);
        }
        
        @keyframes gradient {
            0% {
                background-position: 0% 50%;
            }
            50% {
                background-position: 100% 50%;
            }
            100% {
                background-position: 0% 50%;
            }
        }
        
        /* Expander styling */
        .streamlit-expanderHeader {
            background-color: #f0f2f6;
            border-radius: 5px;
            margin-bottom: 0.5rem;
        }
        
        /* Button styling */
        .stButton button {
            background-color: transparent;
            border: 1px solid #4ECDC4;
            color: #4ECDC4;
            transition: all 0.3s ease;
        }
        
        .stButton button:hover {
            background-color: #4ECDC4;
            color: white;
            transform: translateY(-2px);
        }
        </style>
        """, unsafe_allow_html=True)

    with st.sidebar:
        # Custom HTML title with animation
        st.markdown('<div class="sidebar-title">AI For Impact</div>', unsafe_allow_html=True)

        # Home section
        with st.expander("🏠 HOME", expanded=False):
            if st.button("Home Page", key="home", use_container_width=True):
                st.session_state["page"] = "home"

        # Assignments section
        with st.expander("📚 ASSIGNMENTS", expanded=False):
            if st.button("Assignment 1", key="as1", use_container_width=True):
                st.session_state["page"] = "as1"
            if st.button("Assignment 2", key="as2", use_container_width=True):
                st.session_state["page"] = "as2"
            if st.button("Assignment 3", key="as3", use_container_width=True):
                st.session_state["page"] = "as3"
            if st.button("Assignment 4", key="as4", use_container_width=True):
                st.session_state["page"] = "as4"

        # Quizzes section
        with st.expander("📝 QUIZZES", expanded=False):
            if st.button("Quiz 1", key="quiz1", use_container_width=True):
                st.session_state["page"] = "quiz1"
            if st.button("Quiz 2", key="quiz2", use_container_width=True):
                st.session_state["page"] = "quiz2"

        # Help section
        with st.expander("❓ HELP", expanded=False):
            if st.button("Help Center", key="help", use_container_width=True):
                st.session_state["page"] = "help"

        # Logout section
        with st.expander("🚪 LOGOUT", expanded=False):
            if st.button("Logout", key="logout", use_container_width=True):
                st.session_state["page"] = "logout"

    # Return the current page
    return st.session_state.get("page", "home")



----------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------------



Summary of All Options in This Updated admin.py
Execute SQL:

Run any valid SQL command.
See results for queries (e.g., SELECT).
View Schema:

List all tables and view each table’s schema (columns and types).
Create Table:

Define and create a new table by specifying its name and columns.
Drop Table:

Permanently delete a table from the database (with a confirmation step).
Insert Row:

Insert a new row into a selected table by filling in values for each column.
Edit Row:

Fetch and update rows in a table based on a provided WHERE clause.
Delete Row:

Remove rows from a table using a specified WHERE clause.
Alter Table:

Add Column:
Select a table and add a new column by specifying its name and data type.
Delete Column:
Select a table and choose an existing column to delete.
The process recreates the table without the chosen column (data for remaining columns is preserved).
Backup/Restore:

Create a backup of the database file locally.
Restore the database from an uploaded backup file.
Push Changes to GitHub:

After many operations, you can push your local database changes to GitHub.
